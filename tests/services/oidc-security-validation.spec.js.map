{"version":3,"file":"oidc-security-validation.spec.js","sourceRoot":"","sources":["oidc-security-validation.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpClientModule } from '@angular/common/http';\r\nimport { TestBed } from '@angular/core/testing';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { RouterTestingModule } from '@angular/router/testing';\r\n\r\nimport { OpenIDImplicitFlowConfiguration } from '../../src/angular-auth-oidc-client';\r\nimport {\r\n    AuthConfiguration,\r\n    DefaultConfiguration\r\n} from '../../src/modules/auth.configuration';\r\nimport { OidcSecurityCommon } from '../../src/services/oidc.security.common';\r\nimport { OidcSecurityValidation } from '../../src/services/oidc.security.validation';\r\nimport { TestStorage } from '../common/test-storage.service';\r\nimport { AuthModule } from './../../index';\r\nimport { ArrayHelperService } from '../../src/services/oidc-array-helper.service';\r\nimport { TokenHelperService } from '../../src/services/oidc-token-helper.service';\r\n\r\ndescribe('OidcSecurityValidation', () => {\r\n    beforeEach(() => {\r\n        TestBed.configureTestingModule({\r\n            imports: [\r\n                BrowserModule,\r\n                HttpClientModule,\r\n                RouterTestingModule,\r\n                AuthModule.forRoot()\r\n            ],\r\n            providers: [ArrayHelperService]\r\n        });\r\n    });\r\n\r\n    // beforeEach(() => {\r\n    //     oidcSecurityService = TestBed.get(OidcSecurityService);\r\n    // });\r\n\r\n    it('validate aud string', () => {\r\n        const authConfiguration = new AuthConfiguration(\r\n            new DefaultConfiguration()\r\n        );\r\n\r\n        let openIDImplicitFlowConfiguration = new OpenIDImplicitFlowConfiguration();\r\n        openIDImplicitFlowConfiguration.stsServer = 'https://localhost:5001';\r\n        openIDImplicitFlowConfiguration.redirect_url =\r\n            'https://localhost:44386';\r\n        openIDImplicitFlowConfiguration.client_id =\r\n            '188968487735-b1hh7k87nkkh6vv84548sinju2kpr7gn.apps.googleusercontent.com';\r\n        openIDImplicitFlowConfiguration.response_type = 'id_token token';\r\n        openIDImplicitFlowConfiguration.scope = 'openid email profile';\r\n        openIDImplicitFlowConfiguration.post_logout_redirect_uri =\r\n            'https://localhost:44386/Unauthorized';\r\n        openIDImplicitFlowConfiguration.post_login_route = '/home';\r\n        openIDImplicitFlowConfiguration.forbidden_route = '/Forbidden';\r\n        openIDImplicitFlowConfiguration.unauthorized_route = '/Unauthorized';\r\n        openIDImplicitFlowConfiguration.start_checksession = false;\r\n        openIDImplicitFlowConfiguration.silent_renew = false;\r\n        openIDImplicitFlowConfiguration.silent_renew_offset_in_seconds = 0;\r\n        openIDImplicitFlowConfiguration.log_console_warning_active = true;\r\n        openIDImplicitFlowConfiguration.log_console_debug_active = true;\r\n        openIDImplicitFlowConfiguration.max_id_token_iat_offset_allowed_in_seconds = 10;\r\n        openIDImplicitFlowConfiguration.override_well_known_configuration = true;\r\n        openIDImplicitFlowConfiguration.override_well_known_configuration_url =\r\n            'https://localhost:44386/wellknownconfiguration.json';\r\n\r\n        authConfiguration.init(openIDImplicitFlowConfiguration);\r\n\r\n        const oidcSecurityStorage = new TestStorage();\r\n\r\n        const oidcSecurityCommon = new OidcSecurityCommon(\r\n            authConfiguration,\r\n            oidcSecurityStorage\r\n        );\r\n\r\n        const oidcSecurityValidation = new OidcSecurityValidation(\r\n            oidcSecurityCommon,\r\n            new ArrayHelperService(),\r\n            new TokenHelperService()\r\n        );\r\n\r\n        const dataIdToken = { aud: 'banana' };\r\n        let valueTrue = oidcSecurityValidation.validate_id_token_aud(\r\n            dataIdToken,\r\n            'banana'\r\n        );\r\n        expect(valueTrue).toEqual(true);\r\n\r\n        let valueFalse = oidcSecurityValidation.validate_id_token_aud(\r\n            dataIdToken,\r\n            'bananammmm'\r\n        );\r\n        expect(valueFalse).toEqual(false);\r\n    });\r\n\r\n    it('validate aud array', () => {\r\n        const authConfiguration = new AuthConfiguration(\r\n            new DefaultConfiguration()\r\n        );\r\n\r\n        let openIDImplicitFlowConfiguration = new OpenIDImplicitFlowConfiguration();\r\n        openIDImplicitFlowConfiguration.stsServer = 'https://localhost:5001';\r\n        openIDImplicitFlowConfiguration.redirect_url =\r\n            'https://localhost:44386';\r\n        openIDImplicitFlowConfiguration.client_id =\r\n            '188968487735-b1hh7k87nkkh6vv84548sinju2kpr7gn.apps.googleusercontent.com';\r\n        openIDImplicitFlowConfiguration.response_type = 'id_token token';\r\n        openIDImplicitFlowConfiguration.scope = 'openid email profile';\r\n        openIDImplicitFlowConfiguration.post_logout_redirect_uri =\r\n            'https://localhost:44386/Unauthorized';\r\n        openIDImplicitFlowConfiguration.post_login_route = '/home';\r\n        openIDImplicitFlowConfiguration.forbidden_route = '/Forbidden';\r\n        openIDImplicitFlowConfiguration.unauthorized_route = '/Unauthorized';\r\n        openIDImplicitFlowConfiguration.start_checksession = false;\r\n        openIDImplicitFlowConfiguration.silent_renew = false;\r\n        openIDImplicitFlowConfiguration.silent_renew_offset_in_seconds = 0;\r\n        openIDImplicitFlowConfiguration.log_console_warning_active = true;\r\n        openIDImplicitFlowConfiguration.log_console_debug_active = true;\r\n        openIDImplicitFlowConfiguration.max_id_token_iat_offset_allowed_in_seconds = 10;\r\n        openIDImplicitFlowConfiguration.override_well_known_configuration = true;\r\n        openIDImplicitFlowConfiguration.override_well_known_configuration_url =\r\n            'https://localhost:44386/wellknownconfiguration.json';\r\n\r\n        authConfiguration.init(openIDImplicitFlowConfiguration);\r\n\r\n        const oidcSecurityStorage = new TestStorage();\r\n\r\n        const oidcSecurityCommon = new OidcSecurityCommon(\r\n            authConfiguration,\r\n            oidcSecurityStorage\r\n        );\r\n        const oidcSecurityValidation = new OidcSecurityValidation(\r\n            oidcSecurityCommon,\r\n            new ArrayHelperService(),\r\n            new TokenHelperService()\r\n        );\r\n\r\n        const dataIdToken = {\r\n            aud: ['banana', 'apple', 'https://nice.dom']\r\n        };\r\n        let valueTrue = oidcSecurityValidation.validate_id_token_aud(\r\n            dataIdToken,\r\n            ['banana', 'apple', 'https://nice.dom']\r\n        );\r\n        expect(valueTrue).toEqual(true);\r\n\r\n        let valueFalse = oidcSecurityValidation.validate_id_token_aud(\r\n            dataIdToken,\r\n            ['ooo', 'apple', 'https://nice.dom']\r\n        );\r\n        expect(valueFalse).toEqual(false);\r\n    });\r\n});\r\n"]}