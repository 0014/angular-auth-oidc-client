{"version":3,"file":"oidc-security-state-validation.service.spec.js","sourceRoot":"","sources":["oidc-security-state-validation.service.spec.ts"],"names":[],"mappings":";;AAAA,uEAA6D;AAC7D,oDAAmD;AACnD,oHAAmG;AACnG,6CAAwD;AACxD,iDAAgD;AAChD,8DAA0D;AAC1D,mDAA8D;AAC9D,6DAA2D;AAC3D,+EAI4C;AAC5C,gFAA6E;AAI7E,0FAAkF;AAElF,QAAQ,CAAC,oCAAoC,EAAE;IAC3C,IAAI,sBAA8C,CAAC;IACnD,IAAI,sBAA8C,CAAC;IACnD,IAAI,kBAAsC,CAAC;IAC3C,IAAI,iBAAoC,CAAC;IACzC,IAAI,kBAAsC,CAAC;IAE3C,UAAU,CAAC;QACP,iBAAO,CAAC,sBAAsB,CAAC;YAC3B,OAAO,EAAE;gBACL,gCAAa;gBACb,uBAAgB;gBAChB,6BAAmB;gBACnB,wBAAU,CAAC,OAAO,EAAE;aACvB;YACD,SAAS,EAAE;gBACP,+DAAsB;gBACtB,iDAAsB;gBACtB,yCAAkB;gBAClB,4CAAiB;gBACjB,8CAAkB;gBAClB;oBACI,OAAO,EAAE,8CAAmB;oBAC5B,QAAQ,EAAE,kCAAW;iBACxB;aACJ;SACJ,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,UAAU,CAAC;QACP,sBAAsB,GAAG,iBAAO,CAAC,GAAG,CAAC,+DAAsB,CAAC,CAAC;QAC7D,sBAAsB,GAAG,iBAAO,CAAC,GAAG,CAAC,iDAAsB,CAAC,CAAC;QAC7D,kBAAkB,GAAG,iBAAO,CAAC,GAAG,CAAC,yCAAkB,CAAC,CAAC;QACrD,iBAAiB,GAAG,iBAAO,CAAC,GAAG,CAAC,4CAAiB,CAAC,CAAC;QACnD,kBAAkB,GAAG,iBAAO,CAAC,GAAG,CAAC,8CAAkB,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,eAAe,EAAE;QAChB,MAAM,CAAC,sBAAsB,CAAC,CAAC,UAAU,EAAE,CAAC;QAC5C,MAAM,CAAC,sBAAsB,CAAC,CAAC,UAAU,EAAE,CAAC;QAC5C,MAAM,CAAC,kBAAkB,CAAC,CAAC,UAAU,EAAE,CAAC;QACxC,MAAM,CAAC,iBAAiB,CAAC,CAAC,UAAU,EAAE,CAAC;IAC3C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wEAAwE,EAAE;QACzE,KAAK,CACD,sBAAsB,EACtB,+BAA+B,CAClC,CAAC,GAAG,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAEzB,IAAI,aAAa,GAAG,KAAK,CACrB,kBAAkB,EAClB,YAAY,CACf,CAAC,GAAG,CAAC,QAAQ,CAAC,cAAO,CAAC,CAAC,CAAC;QAEzB,IAAM,KAAK,GAAG,sBAAsB,CAAC,aAAa,CAAC,EAAE,EAAE,IAAI,iBAAO,EAAE,CAAC,CAAC;QAEtE,MAAM,CACF,sBAAsB,CAAC,6BAA6B,CACvD,CAAC,gBAAgB,EAAE,CAAC;QAErB,MAAM,CAAC,aAAa,CAAC,CAAC,oBAAoB,CACtC,oCAAoC,CACvC,CAAC;QAEF,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACpC,MAAM,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC9C,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,WAAW,EAAE,CAAC;QAC7C,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACpC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iGAAiG,EAAE;QAClG,KAAK,CACD,sBAAsB,EACtB,+BAA+B,CAClC,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAExB,aAAa,CACT,iBAAiB,EACjB,eAAe,EACf,KAAK,CACR,CAAC,GAAG,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC;QAEpC,KAAK,CAAC,kBAAkB,EAAE,qBAAqB,CAAC,CAAC,GAAG,CAAC,WAAW,CAC5D,kBAAkB,CACrB,CAAC;QAEF,KAAK,CACD,sBAAsB,EACtB,6BAA6B,CAChC,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAExB,KAAK,CACD,sBAAsB,EACtB,yBAAyB,CAC5B,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAExB,KAAK,CACD,sBAAsB,EACtB,4BAA4B,CAC/B,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAExB,aAAa,CACT,iBAAiB,EACjB,4CAA4C,EAC5C,KAAK,CACR,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QAErB,aAAa,CAAC,iBAAiB,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC,GAAG,CAAC,WAAW,CAChE,EAAE,CACL,CAAC;QAEF,KAAK,CACD,sBAAsB,EACtB,kCAAkC,CACrC,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAExB,KAAK,CAAC,sBAAsB,EAAE,uBAAuB,CAAC,CAAC,GAAG,CAAC,WAAW,CAClE,IAAI,CACP,CAAC;QAEF,KAAK,CACD,sBAAsB,EACtB,mCAAmC,CACtC,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAExB,KAAK,CAAC,sBAAsB,EAAE,uBAAuB,CAAC,CAAC,GAAG,CAAC,WAAW,CAClE,IAAI,CACP,CAAC;QAEF,KAAK,CACD,sBAAsB,EACtB,2BAA2B,CAC9B,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAExB,aAAa,CACT,iBAAiB,EACjB,uCAAuC,EACvC,KAAK,CACR,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;QAEtB,KAAK,CAAC,kBAAkB,EAAE,UAAU,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,cAAO,CAAC,CAAC,CAAC;QAE7D,IAAM,KAAK,GAAG,sBAAsB,CAAC,aAAa,CAC9C;YACI,YAAY,EAAE,kBAAkB;YAChC,QAAQ,EAAE,cAAc;SAC3B,EACD,IAAI,iBAAO,EAAE,CAChB,CAAC;QAEF,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QACpD,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAC5C,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QACxD,MAAM,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sEAAsE,EAAE;QACvE,KAAK,CACD,sBAAsB,EACtB,+BAA+B,CAClC,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAExB,aAAa,CACT,iBAAiB,EACjB,eAAe,EACf,KAAK,CACR,CAAC,GAAG,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC;QAEpC,KAAK,CAAC,kBAAkB,EAAE,qBAAqB,CAAC,CAAC,GAAG,CAAC,WAAW,CAC5D,kBAAkB,CACrB,CAAC;QAEF,KAAK,CACD,sBAAsB,EACtB,6BAA6B,CAChC,CAAC,GAAG,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAEzB,IAAI,WAAW,GAAG,KAAK,CAAC,kBAAkB,EAAE,UAAU,CAAC,CAAC,GAAG,CAAC,QAAQ,CAChE,cAAO,CAAC,CACX,CAAC;QAEF,IAAM,KAAK,GAAG,sBAAsB,CAAC,aAAa,CAC9C;YACI,YAAY,EAAE,kBAAkB;YAChC,QAAQ,EAAE,cAAc;SAC3B,EACD,IAAI,iBAAO,EAAE,CAChB,CAAC;QAEF,MAAM,CAAC,WAAW,CAAC,CAAC,oBAAoB,CACpC,yDAAyD,CAC5D,CAAC;QAEF,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QACpD,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAC5C,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QACxD,MAAM,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kEAAkE,EAAE;QACnE,KAAK,CACD,sBAAsB,EACtB,+BAA+B,CAClC,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAExB,aAAa,CACT,iBAAiB,EACjB,eAAe,EACf,KAAK,CACR,CAAC,GAAG,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC;QAEpC,KAAK,CAAC,kBAAkB,EAAE,qBAAqB,CAAC,CAAC,GAAG,CAAC,WAAW,CAC5D,kBAAkB,CACrB,CAAC;QAEF,KAAK,CACD,sBAAsB,EACtB,6BAA6B,CAChC,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAExB,KAAK,CACD,sBAAsB,EACtB,yBAAyB,CAC5B,CAAC,GAAG,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAEzB,IAAI,aAAa,GAAG,KAAK,CACrB,kBAAkB,EAClB,YAAY,CACf,CAAC,GAAG,CAAC,QAAQ,CAAC,cAAO,CAAC,CAAC,CAAC;QAEzB,IAAM,KAAK,GAAG,sBAAsB,CAAC,aAAa,CAC9C;YACI,YAAY,EAAE,kBAAkB;YAChC,QAAQ,EAAE,cAAc;SAC3B,EACD,IAAI,iBAAO,EAAE,CAChB,CAAC;QAEF,MAAM,CAAC,aAAa,CAAC,CAAC,oBAAoB,CACtC,oCAAoC,CACvC,CAAC;QAEF,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QACpD,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAC5C,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QACxD,MAAM,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qEAAqE,EAAE;QACtE,KAAK,CACD,sBAAsB,EACtB,+BAA+B,CAClC,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAExB,aAAa,CACT,iBAAiB,EACjB,eAAe,EACf,KAAK,CACR,CAAC,GAAG,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC;QAEpC,KAAK,CAAC,kBAAkB,EAAE,qBAAqB,CAAC,CAAC,GAAG,CAAC,WAAW,CAC5D,kBAAkB,CACrB,CAAC;QAEF,KAAK,CACD,sBAAsB,EACtB,6BAA6B,CAChC,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAExB,KAAK,CACD,sBAAsB,EACtB,yBAAyB,CAC5B,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAExB,KAAK,CACD,sBAAsB,EACtB,4BAA4B,CAC/B,CAAC,GAAG,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAEzB,IAAI,WAAW,GAAG,KAAK,CAAC,kBAAkB,EAAE,UAAU,CAAC,CAAC,GAAG,CAAC,QAAQ,CAChE,cAAO,CAAC,CACX,CAAC;QAEF,IAAM,KAAK,GAAG,sBAAsB,CAAC,aAAa,CAC9C;YACI,YAAY,EAAE,kBAAkB;YAChC,QAAQ,EAAE,cAAc;SAC3B,EACD,IAAI,iBAAO,EAAE,CAChB,CAAC;QAEF,MAAM,CAAC,WAAW,CAAC,CAAC,oBAAoB,CACpC,qFAAqF,CACxF,CAAC;QAEF,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QACpD,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAC5C,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QACxD,MAAM,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2EAA2E,EAAE;QAC5E,KAAK,CACD,sBAAsB,EACtB,+BAA+B,CAClC,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAExB,aAAa,CACT,iBAAiB,EACjB,eAAe,EACf,KAAK,CACR,CAAC,GAAG,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC;QAEpC,KAAK,CAAC,kBAAkB,EAAE,qBAAqB,CAAC,CAAC,GAAG,CAAC,WAAW,CAC5D,kBAAkB,CACrB,CAAC;QAEF,KAAK,CACD,sBAAsB,EACtB,6BAA6B,CAChC,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAExB,KAAK,CACD,sBAAsB,EACtB,yBAAyB,CAC5B,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAExB,KAAK,CACD,sBAAsB,EACtB,4BAA4B,CAC/B,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAExB,KAAK,CACD,sBAAsB,EACtB,kCAAkC,CACrC,CAAC,GAAG,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAEzB,aAAa,CACT,iBAAiB,EACjB,4CAA4C,EAC5C,KAAK,CACR,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QAErB,IAAI,aAAa,GAAG,KAAK,CACrB,kBAAkB,EAClB,YAAY,CACf,CAAC,GAAG,CAAC,QAAQ,CAAC,cAAO,CAAC,CAAC,CAAC;QAEzB,IAAM,KAAK,GAAG,sBAAsB,CAAC,aAAa,CAC9C;YACI,YAAY,EAAE,kBAAkB;YAChC,QAAQ,EAAE,cAAc;SAC3B,EACD,IAAI,iBAAO,EAAE,CAChB,CAAC;QAEF,MAAM,CAAC,aAAa,CAAC,CAAC,oBAAoB,CACtC,oGAAoG,CACvG,CAAC;QAEF,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QACpD,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAC5C,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QACxD,MAAM,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gEAAgE,EAAE;QACjE,KAAK,CACD,sBAAsB,EACtB,+BAA+B,CAClC,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAExB,aAAa,CACT,iBAAiB,EACjB,eAAe,EACf,KAAK,CACR,CAAC,GAAG,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC;QAEpC,KAAK,CAAC,kBAAkB,EAAE,qBAAqB,CAAC,CAAC,GAAG,CAAC,WAAW,CAC5D,kBAAkB,CACrB,CAAC;QAEF,KAAK,CACD,sBAAsB,EACtB,6BAA6B,CAChC,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAExB,KAAK,CACD,sBAAsB,EACtB,yBAAyB,CAC5B,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAExB,KAAK,CACD,sBAAsB,EACtB,4BAA4B,CAC/B,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAExB,KAAK,CACD,sBAAsB,EACtB,kCAAkC,CACrC,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAExB,aAAa,CACT,iBAAiB,EACjB,4CAA4C,EAC5C,KAAK,CACR,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QAErB,KAAK,CAAC,sBAAsB,EAAE,uBAAuB,CAAC,CAAC,GAAG,CAAC,WAAW,CAClE,KAAK,CACR,CAAC;QAEF,IAAI,aAAa,GAAG,KAAK,CACrB,kBAAkB,EAClB,YAAY,CACf,CAAC,GAAG,CAAC,QAAQ,CAAC,cAAO,CAAC,CAAC,CAAC;QAEzB,IAAM,KAAK,GAAG,sBAAsB,CAAC,aAAa,CAC9C;YACI,YAAY,EAAE,kBAAkB;YAChC,QAAQ,EAAE,cAAc;SAC3B,EACD,IAAI,iBAAO,EAAE,CAChB,CAAC;QAEF,MAAM,CAAC,aAAa,CAAC,CAAC,oBAAoB,CACtC,+EAA+E,CAClF,CAAC;QAEF,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QACpD,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAC5C,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QACxD,MAAM,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gEAAgE,EAAE;QACjE,KAAK,CACD,sBAAsB,EACtB,+BAA+B,CAClC,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAExB,aAAa,CACT,iBAAiB,EACjB,eAAe,EACf,KAAK,CACR,CAAC,GAAG,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC;QAEpC,KAAK,CAAC,kBAAkB,EAAE,qBAAqB,CAAC,CAAC,GAAG,CAAC,WAAW,CAC5D,kBAAkB,CACrB,CAAC;QAEF,KAAK,CACD,sBAAsB,EACtB,6BAA6B,CAChC,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAExB,KAAK,CACD,sBAAsB,EACtB,yBAAyB,CAC5B,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAExB,KAAK,CACD,sBAAsB,EACtB,4BAA4B,CAC/B,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAExB,KAAK,CACD,sBAAsB,EACtB,kCAAkC,CACrC,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAExB,aAAa,CACT,iBAAiB,EACjB,4CAA4C,EAC5C,KAAK,CACR,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QAErB,KAAK,CAAC,sBAAsB,EAAE,uBAAuB,CAAC,CAAC,GAAG,CAAC,WAAW,CAClE,IAAI,CACP,CAAC;QAEF,KAAK,CAAC,sBAAsB,EAAE,uBAAuB,CAAC,CAAC,GAAG,CAAC,WAAW,CAClE,KAAK,CACR,CAAC;QAEF,aAAa,CAAC,iBAAiB,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC,GAAG,CAAC,WAAW,CAChE,EAAE,CACL,CAAC;QAEF,IAAI,aAAa,GAAG,KAAK,CACrB,kBAAkB,EAClB,YAAY,CACf,CAAC,GAAG,CAAC,QAAQ,CAAC,cAAO,CAAC,CAAC,CAAC;QAEzB,IAAM,KAAK,GAAG,sBAAsB,CAAC,aAAa,CAC9C;YACI,YAAY,EAAE,kBAAkB;YAChC,QAAQ,EAAE,cAAc;SAC3B,EACD,IAAI,iBAAO,EAAE,CAChB,CAAC;QAEF,MAAM,CAAC,aAAa,CAAC,CAAC,oBAAoB,CACtC,kCAAkC,CACrC,CAAC;QAEF,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QACpD,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAC5C,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QACxD,MAAM,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4EAA4E,EAAE;QAC7E,KAAK,CACD,sBAAsB,EACtB,+BAA+B,CAClC,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAExB,aAAa,CACT,iBAAiB,EACjB,eAAe,EACf,KAAK,CACR,CAAC,GAAG,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC;QAEpC,KAAK,CAAC,kBAAkB,EAAE,qBAAqB,CAAC,CAAC,GAAG,CAAC,WAAW,CAC5D,kBAAkB,CACrB,CAAC;QAEF,KAAK,CACD,sBAAsB,EACtB,6BAA6B,CAChC,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAExB,KAAK,CACD,sBAAsB,EACtB,yBAAyB,CAC5B,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAExB,KAAK,CACD,sBAAsB,EACtB,4BAA4B,CAC/B,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAExB,KAAK,CACD,sBAAsB,EACtB,kCAAkC,CACrC,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAExB,aAAa,CACT,iBAAiB,EACjB,4CAA4C,EAC5C,KAAK,CACR,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QAErB,KAAK,CAAC,sBAAsB,EAAE,uBAAuB,CAAC,CAAC,GAAG,CAAC,WAAW,CAClE,IAAI,CACP,CAAC;QAEF,KAAK,CAAC,sBAAsB,EAAE,uBAAuB,CAAC,CAAC,GAAG,CAAC,WAAW,CAClE,IAAI,CACP,CAAC;QAEF,aAAa,CAAC,iBAAiB,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC,GAAG,CAAC,WAAW,CAChE,EAAE,CACL,CAAC;QAEF,KAAK,CACD,sBAAsB,EACtB,mCAAmC,CACtC,CAAC,GAAG,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAEzB,IAAI,aAAa,GAAG,KAAK,CACrB,kBAAkB,EAClB,YAAY,CACf,CAAC,GAAG,CAAC,QAAQ,CAAC,cAAO,CAAC,CAAC,CAAC;QAEzB,IAAM,KAAK,GAAG,sBAAsB,CAAC,aAAa,CAC9C;YACI,YAAY,EAAE,kBAAkB;YAChC,QAAQ,EAAE,cAAc;SAC3B,EACD,IAAI,iBAAO,EAAE,CAChB,CAAC;QAEF,MAAM,CAAC,aAAa,CAAC,CAAC,oBAAoB,CACtC,kCAAkC,CACrC,CAAC;QAEF,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QACpD,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAC5C,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QACxD,MAAM,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qFAAqF,EAAE;QACtF,KAAK,CACD,sBAAsB,EACtB,+BAA+B,CAClC,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAExB,KAAK,CAAC,kBAAkB,EAAE,qBAAqB,CAAC,CAAC,GAAG,CAAC,WAAW,CAC5D,kBAAkB,CACrB,CAAC;QAEF,KAAK,CACD,sBAAsB,EACtB,6BAA6B,CAChC,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAExB,KAAK,CACD,sBAAsB,EACtB,yBAAyB,CAC5B,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAExB,KAAK,CACD,sBAAsB,EACtB,4BAA4B,CAC/B,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAExB,KAAK,CACD,sBAAsB,EACtB,kCAAkC,CACrC,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAExB,aAAa,CACT,iBAAiB,EACjB,4CAA4C,EAC5C,KAAK,CACR,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QAErB,KAAK,CAAC,sBAAsB,EAAE,uBAAuB,CAAC,CAAC,GAAG,CAAC,WAAW,CAClE,IAAI,CACP,CAAC;QAEF,KAAK,CAAC,sBAAsB,EAAE,uBAAuB,CAAC,CAAC,GAAG,CAAC,WAAW,CAClE,IAAI,CACP,CAAC;QAEF,aAAa,CAAC,iBAAiB,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC,GAAG,CAAC,WAAW,CAChE,EAAE,CACL,CAAC;QAEF,KAAK,CACD,sBAAsB,EACtB,mCAAmC,CACtC,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAExB,aAAa,CACT,iBAAiB,EACjB,eAAe,EACf,KAAK,CACR,CAAC,GAAG,CAAC,WAAW,CAAC,oBAAoB,CAAC,CAAC;QAExC,aAAa,CACT,iBAAiB,EACjB,uCAAuC,EACvC,KAAK,CACR,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;QAEtB,IAAI,WAAW,GAAG,KAAK,CAAC,kBAAkB,EAAE,UAAU,CAAC,CAAC,GAAG,CAAC,QAAQ,CAChE,cAAO,CAAC,CACX,CAAC;QAEF,IAAM,KAAK,GAAG,sBAAsB,CAAC,aAAa,CAC9C;YACI,YAAY,EAAE,kBAAkB;YAChC,QAAQ,EAAE,cAAc;SAC3B,EACD,IAAI,iBAAO,EAAE,CAChB,CAAC;QAEF,MAAM,CAAC,WAAW,CAAC,CAAC,oBAAoB,CACpC,iDAAiD,CACpD,CAAC;QAEF,iDAAiD;QACjD,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACpC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAC5C,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QACxD,MAAM,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0DAA0D,EAAE;QAC3D,KAAK,CACD,sBAAsB,EACtB,+BAA+B,CAClC,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAExB,KAAK,CAAC,kBAAkB,EAAE,qBAAqB,CAAC,CAAC,GAAG,CAAC,WAAW,CAC5D,kBAAkB,CACrB,CAAC;QAEF,KAAK,CACD,sBAAsB,EACtB,6BAA6B,CAChC,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAExB,KAAK,CACD,sBAAsB,EACtB,yBAAyB,CAC5B,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAExB,KAAK,CACD,sBAAsB,EACtB,4BAA4B,CAC/B,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAExB,KAAK,CACD,sBAAsB,EACtB,kCAAkC,CACrC,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAExB,aAAa,CACT,iBAAiB,EACjB,4CAA4C,EAC5C,KAAK,CACR,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QAErB,KAAK,CAAC,sBAAsB,EAAE,uBAAuB,CAAC,CAAC,GAAG,CAAC,WAAW,CAClE,IAAI,CACP,CAAC;QAEF,KAAK,CAAC,sBAAsB,EAAE,uBAAuB,CAAC,CAAC,GAAG,CAAC,WAAW,CAClE,IAAI,CACP,CAAC;QAEF,aAAa,CAAC,iBAAiB,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC,GAAG,CAAC,WAAW,CAChE,EAAE,CACL,CAAC;QAEF,KAAK,CACD,sBAAsB,EACtB,mCAAmC,CACtC,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAExB,aAAa,CACT,iBAAiB,EACjB,eAAe,EACf,KAAK,CACR,CAAC,GAAG,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC;QAEpC,aAAa,CACT,iBAAiB,EACjB,uCAAuC,EACvC,KAAK,CACR,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;QAEtB,KAAK,CACD,sBAAsB,EACtB,2BAA2B,CAC9B,CAAC,GAAG,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAEzB,IAAI,aAAa,GAAG,KAAK,CACrB,kBAAkB,EAClB,YAAY,CACf,CAAC,GAAG,CAAC,QAAQ,CAAC,cAAO,CAAC,CAAC,CAAC;QAEzB,IAAM,KAAK,GAAG,sBAAsB,CAAC,aAAa,CAC9C;YACI,YAAY,EAAE,kBAAkB;YAChC,QAAQ,EAAE,cAAc;SAC3B,EACD,IAAI,iBAAO,EAAE,CAChB,CAAC;QAEF,MAAM,CAAC,aAAa,CAAC,CAAC,oBAAoB,CACtC,sCAAsC,CACzC,CAAC;QAEF,iDAAiD;QACjD,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QACpD,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAC5C,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QACxD,MAAM,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import { TestStorage } from '../common/test-storage.service';\r\nimport { JwtKeys } from '../../src/models/jwtkeys';\r\nimport { StateValidationService } from '../../src/services/oidc-security-state-validation.service';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { TestBed } from '@angular/core/testing';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { RouterTestingModule } from '@angular/router/testing';\r\nimport { AuthModule } from '../../src/modules/auth.module';\r\nimport {\r\n    OidcSecurityValidation,\r\n    OidcSecurityStorage,\r\n    AuthConfiguration\r\n} from '../../src/angular-auth-oidc-client';\r\nimport { OidcSecurityCommon } from '../../src/services/oidc.security.common';\r\n\r\nimport {} from 'jasmine';\r\nimport {} from 'node';\r\nimport { TokenHelperService } from '../../src/services/oidc-token-helper.service';\r\n\r\ndescribe('OidcSecurityStateValidationService', () => {\r\n    let stateValidationService: StateValidationService;\r\n    let oidcSecurityValidation: OidcSecurityValidation;\r\n    let oidcSecurityCommon: OidcSecurityCommon;\r\n    let authConfiguration: AuthConfiguration;\r\n    let tokenHelperService: TokenHelperService;\r\n\r\n    beforeEach(() => {\r\n        TestBed.configureTestingModule({\r\n            imports: [\r\n                BrowserModule,\r\n                HttpClientModule,\r\n                RouterTestingModule,\r\n                AuthModule.forRoot()\r\n            ],\r\n            providers: [\r\n                StateValidationService,\r\n                OidcSecurityValidation,\r\n                OidcSecurityCommon,\r\n                AuthConfiguration,\r\n                TokenHelperService,\r\n                {\r\n                    provide: OidcSecurityStorage,\r\n                    useClass: TestStorage\r\n                }\r\n            ]\r\n        });\r\n    });\r\n\r\n    beforeEach(() => {\r\n        stateValidationService = TestBed.get(StateValidationService);\r\n        oidcSecurityValidation = TestBed.get(OidcSecurityValidation);\r\n        oidcSecurityCommon = TestBed.get(OidcSecurityCommon);\r\n        authConfiguration = TestBed.get(AuthConfiguration);\r\n        tokenHelperService = TestBed.get(TokenHelperService);\r\n    });\r\n\r\n    it('should create', () => {\r\n        expect(stateValidationService).toBeTruthy();\r\n        expect(oidcSecurityValidation).toBeTruthy();\r\n        expect(oidcSecurityCommon).toBeTruthy();\r\n        expect(authConfiguration).toBeTruthy();\r\n    });\r\n\r\n    it('should return invalid result if validateStateFromHashCallback is false', () => {\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validateStateFromHashCallback'\r\n        ).and.returnValue(false);\r\n\r\n        let logWarningSpy = spyOn(\r\n            oidcSecurityCommon,\r\n            'logWarning'\r\n        ).and.callFake(() => {});\r\n\r\n        const state = stateValidationService.validateState('', new JwtKeys());\r\n\r\n        expect(\r\n            oidcSecurityValidation.validateStateFromHashCallback\r\n        ).toHaveBeenCalled();\r\n\r\n        expect(logWarningSpy).toHaveBeenCalledWith(\r\n            'authorizedCallback incorrect state'\r\n        );\r\n\r\n        expect(state.access_token).toBe('');\r\n        expect(state.authResponseIsValid).toBe(false);\r\n        expect(state.decoded_id_token).toBeDefined();\r\n        expect(state.id_token).toBe('');\r\n    });\r\n\r\n    it('access_token should equal result.access_token and is valid if response_type is \"id_token token\"', () => {\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validateStateFromHashCallback'\r\n        ).and.returnValue(true);\r\n\r\n        spyOnProperty(\r\n            authConfiguration,\r\n            'response_type',\r\n            'get'\r\n        ).and.returnValue('id_token token');\r\n\r\n        spyOn(tokenHelperService, 'getPayloadFromToken').and.returnValue(\r\n            'decoded_id_token'\r\n        );\r\n\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validate_signature_id_token'\r\n        ).and.returnValue(true);\r\n\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validate_id_token_nonce'\r\n        ).and.returnValue(true);\r\n\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validate_required_id_token'\r\n        ).and.returnValue(true);\r\n\r\n        spyOnProperty(\r\n            authConfiguration,\r\n            'max_id_token_iat_offset_allowed_in_seconds',\r\n            'get'\r\n        ).and.returnValue(0);\r\n\r\n        spyOnProperty(authConfiguration, 'client_id', 'get').and.returnValue(\r\n            ''\r\n        );\r\n\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validate_id_token_iat_max_offset'\r\n        ).and.returnValue(true);\r\n\r\n        spyOn(oidcSecurityValidation, 'validate_id_token_aud').and.returnValue(\r\n            true\r\n        );\r\n\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validate_id_token_exp_not_expired'\r\n        ).and.returnValue(true);\r\n\r\n        spyOn(oidcSecurityValidation, 'validate_id_token_iss').and.returnValue(\r\n            true\r\n        );\r\n\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validate_id_token_at_hash'\r\n        ).and.returnValue(true);\r\n\r\n        spyOnProperty(\r\n            authConfiguration,\r\n            'auto_clean_state_after_authentication',\r\n            'get'\r\n        ).and.returnValue('');\r\n\r\n        spyOn(oidcSecurityCommon, 'logDebug').and.callFake(() => {});\r\n\r\n        const state = stateValidationService.validateState(\r\n            {\r\n                access_token: 'access_tokenTEST',\r\n                id_token: 'id_tokenTEST'\r\n            },\r\n            new JwtKeys()\r\n        );\r\n\r\n        expect(state.access_token).toBe('access_tokenTEST');\r\n        expect(state.id_token).toBe('id_tokenTEST');\r\n        expect(state.decoded_id_token).toBe('decoded_id_token');\r\n        expect(state.authResponseIsValid).toBe(true);\r\n    });\r\n\r\n    it('should return invalid result if validate_signature_id_token is false', () => {\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validateStateFromHashCallback'\r\n        ).and.returnValue(true);\r\n\r\n        spyOnProperty(\r\n            authConfiguration,\r\n            'response_type',\r\n            'get'\r\n        ).and.returnValue('id_token token');\r\n\r\n        spyOn(tokenHelperService, 'getPayloadFromToken').and.returnValue(\r\n            'decoded_id_token'\r\n        );\r\n\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validate_signature_id_token'\r\n        ).and.returnValue(false);\r\n\r\n        let logDebugSpy = spyOn(oidcSecurityCommon, 'logDebug').and.callFake(\r\n            () => {}\r\n        );\r\n\r\n        const state = stateValidationService.validateState(\r\n            {\r\n                access_token: 'access_tokenTEST',\r\n                id_token: 'id_tokenTEST'\r\n            },\r\n            new JwtKeys()\r\n        );\r\n\r\n        expect(logDebugSpy).toHaveBeenCalledWith(\r\n            'authorizedCallback Signature validation failed id_token'\r\n        );\r\n\r\n        expect(state.access_token).toBe('access_tokenTEST');\r\n        expect(state.id_token).toBe('id_tokenTEST');\r\n        expect(state.decoded_id_token).toBe('decoded_id_token');\r\n        expect(state.authResponseIsValid).toBe(false);\r\n    });\r\n\r\n    it('should return invalid result if validate_id_token_nonce is false', () => {\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validateStateFromHashCallback'\r\n        ).and.returnValue(true);\r\n\r\n        spyOnProperty(\r\n            authConfiguration,\r\n            'response_type',\r\n            'get'\r\n        ).and.returnValue('id_token token');\r\n\r\n        spyOn(tokenHelperService, 'getPayloadFromToken').and.returnValue(\r\n            'decoded_id_token'\r\n        );\r\n\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validate_signature_id_token'\r\n        ).and.returnValue(true);\r\n\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validate_id_token_nonce'\r\n        ).and.returnValue(false);\r\n\r\n        let logWarningSpy = spyOn(\r\n            oidcSecurityCommon,\r\n            'logWarning'\r\n        ).and.callFake(() => {});\r\n\r\n        const state = stateValidationService.validateState(\r\n            {\r\n                access_token: 'access_tokenTEST',\r\n                id_token: 'id_tokenTEST'\r\n            },\r\n            new JwtKeys()\r\n        );\r\n\r\n        expect(logWarningSpy).toHaveBeenCalledWith(\r\n            'authorizedCallback incorrect nonce'\r\n        );\r\n\r\n        expect(state.access_token).toBe('access_tokenTEST');\r\n        expect(state.id_token).toBe('id_tokenTEST');\r\n        expect(state.decoded_id_token).toBe('decoded_id_token');\r\n        expect(state.authResponseIsValid).toBe(false);\r\n    });\r\n\r\n    it('should return invalid result if validate_required_id_token is false', () => {\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validateStateFromHashCallback'\r\n        ).and.returnValue(true);\r\n\r\n        spyOnProperty(\r\n            authConfiguration,\r\n            'response_type',\r\n            'get'\r\n        ).and.returnValue('id_token token');\r\n\r\n        spyOn(tokenHelperService, 'getPayloadFromToken').and.returnValue(\r\n            'decoded_id_token'\r\n        );\r\n\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validate_signature_id_token'\r\n        ).and.returnValue(true);\r\n\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validate_id_token_nonce'\r\n        ).and.returnValue(true);\r\n\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validate_required_id_token'\r\n        ).and.returnValue(false);\r\n\r\n        let logDebugSpy = spyOn(oidcSecurityCommon, 'logDebug').and.callFake(\r\n            () => {}\r\n        );\r\n\r\n        const state = stateValidationService.validateState(\r\n            {\r\n                access_token: 'access_tokenTEST',\r\n                id_token: 'id_tokenTEST'\r\n            },\r\n            new JwtKeys()\r\n        );\r\n\r\n        expect(logDebugSpy).toHaveBeenCalledWith(\r\n            'authorizedCallback Validation, one of the REQUIRED properties missing from id_token'\r\n        );\r\n\r\n        expect(state.access_token).toBe('access_tokenTEST');\r\n        expect(state.id_token).toBe('id_tokenTEST');\r\n        expect(state.decoded_id_token).toBe('decoded_id_token');\r\n        expect(state.authResponseIsValid).toBe(false);\r\n    });\r\n\r\n    it('should return invalid result if validate_id_token_iat_max_offset is false', () => {\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validateStateFromHashCallback'\r\n        ).and.returnValue(true);\r\n\r\n        spyOnProperty(\r\n            authConfiguration,\r\n            'response_type',\r\n            'get'\r\n        ).and.returnValue('id_token token');\r\n\r\n        spyOn(tokenHelperService, 'getPayloadFromToken').and.returnValue(\r\n            'decoded_id_token'\r\n        );\r\n\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validate_signature_id_token'\r\n        ).and.returnValue(true);\r\n\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validate_id_token_nonce'\r\n        ).and.returnValue(true);\r\n\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validate_required_id_token'\r\n        ).and.returnValue(true);\r\n\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validate_id_token_iat_max_offset'\r\n        ).and.returnValue(false);\r\n\r\n        spyOnProperty(\r\n            authConfiguration,\r\n            'max_id_token_iat_offset_allowed_in_seconds',\r\n            'get'\r\n        ).and.returnValue(0);\r\n\r\n        let logWarningSpy = spyOn(\r\n            oidcSecurityCommon,\r\n            'logWarning'\r\n        ).and.callFake(() => {});\r\n\r\n        const state = stateValidationService.validateState(\r\n            {\r\n                access_token: 'access_tokenTEST',\r\n                id_token: 'id_tokenTEST'\r\n            },\r\n            new JwtKeys()\r\n        );\r\n\r\n        expect(logWarningSpy).toHaveBeenCalledWith(\r\n            'authorizedCallback Validation, iat rejected id_token was issued too far away from the current time'\r\n        );\r\n\r\n        expect(state.access_token).toBe('access_tokenTEST');\r\n        expect(state.id_token).toBe('id_tokenTEST');\r\n        expect(state.decoded_id_token).toBe('decoded_id_token');\r\n        expect(state.authResponseIsValid).toBe(false);\r\n    });\r\n\r\n    it('should return invalid result if validate_id_token_iss is false', () => {\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validateStateFromHashCallback'\r\n        ).and.returnValue(true);\r\n\r\n        spyOnProperty(\r\n            authConfiguration,\r\n            'response_type',\r\n            'get'\r\n        ).and.returnValue('id_token token');\r\n\r\n        spyOn(tokenHelperService, 'getPayloadFromToken').and.returnValue(\r\n            'decoded_id_token'\r\n        );\r\n\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validate_signature_id_token'\r\n        ).and.returnValue(true);\r\n\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validate_id_token_nonce'\r\n        ).and.returnValue(true);\r\n\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validate_required_id_token'\r\n        ).and.returnValue(true);\r\n\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validate_id_token_iat_max_offset'\r\n        ).and.returnValue(true);\r\n\r\n        spyOnProperty(\r\n            authConfiguration,\r\n            'max_id_token_iat_offset_allowed_in_seconds',\r\n            'get'\r\n        ).and.returnValue(0);\r\n\r\n        spyOn(oidcSecurityValidation, 'validate_id_token_iss').and.returnValue(\r\n            false\r\n        );\r\n\r\n        let logWarningSpy = spyOn(\r\n            oidcSecurityCommon,\r\n            'logWarning'\r\n        ).and.callFake(() => {});\r\n\r\n        const state = stateValidationService.validateState(\r\n            {\r\n                access_token: 'access_tokenTEST',\r\n                id_token: 'id_tokenTEST'\r\n            },\r\n            new JwtKeys()\r\n        );\r\n\r\n        expect(logWarningSpy).toHaveBeenCalledWith(\r\n            'authorizedCallback incorrect iss does not match authWellKnownEndpoints issuer'\r\n        );\r\n\r\n        expect(state.access_token).toBe('access_tokenTEST');\r\n        expect(state.id_token).toBe('id_tokenTEST');\r\n        expect(state.decoded_id_token).toBe('decoded_id_token');\r\n        expect(state.authResponseIsValid).toBe(false);\r\n    });\r\n\r\n    it('should return invalid result if validate_id_token_aud is false', () => {\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validateStateFromHashCallback'\r\n        ).and.returnValue(true);\r\n\r\n        spyOnProperty(\r\n            authConfiguration,\r\n            'response_type',\r\n            'get'\r\n        ).and.returnValue('id_token token');\r\n\r\n        spyOn(tokenHelperService, 'getPayloadFromToken').and.returnValue(\r\n            'decoded_id_token'\r\n        );\r\n\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validate_signature_id_token'\r\n        ).and.returnValue(true);\r\n\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validate_id_token_nonce'\r\n        ).and.returnValue(true);\r\n\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validate_required_id_token'\r\n        ).and.returnValue(true);\r\n\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validate_id_token_iat_max_offset'\r\n        ).and.returnValue(true);\r\n\r\n        spyOnProperty(\r\n            authConfiguration,\r\n            'max_id_token_iat_offset_allowed_in_seconds',\r\n            'get'\r\n        ).and.returnValue(0);\r\n\r\n        spyOn(oidcSecurityValidation, 'validate_id_token_iss').and.returnValue(\r\n            true\r\n        );\r\n\r\n        spyOn(oidcSecurityValidation, 'validate_id_token_aud').and.returnValue(\r\n            false\r\n        );\r\n\r\n        spyOnProperty(authConfiguration, 'client_id', 'get').and.returnValue(\r\n            ''\r\n        );\r\n\r\n        let logWarningSpy = spyOn(\r\n            oidcSecurityCommon,\r\n            'logWarning'\r\n        ).and.callFake(() => {});\r\n\r\n        const state = stateValidationService.validateState(\r\n            {\r\n                access_token: 'access_tokenTEST',\r\n                id_token: 'id_tokenTEST'\r\n            },\r\n            new JwtKeys()\r\n        );\r\n\r\n        expect(logWarningSpy).toHaveBeenCalledWith(\r\n            'authorizedCallback incorrect aud'\r\n        );\r\n\r\n        expect(state.access_token).toBe('access_tokenTEST');\r\n        expect(state.id_token).toBe('id_tokenTEST');\r\n        expect(state.decoded_id_token).toBe('decoded_id_token');\r\n        expect(state.authResponseIsValid).toBe(false);\r\n    });\r\n\r\n    it('should return invalid result if validate_id_token_exp_not_expired is false', () => {\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validateStateFromHashCallback'\r\n        ).and.returnValue(true);\r\n\r\n        spyOnProperty(\r\n            authConfiguration,\r\n            'response_type',\r\n            'get'\r\n        ).and.returnValue('id_token token');\r\n\r\n        spyOn(tokenHelperService, 'getPayloadFromToken').and.returnValue(\r\n            'decoded_id_token'\r\n        );\r\n\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validate_signature_id_token'\r\n        ).and.returnValue(true);\r\n\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validate_id_token_nonce'\r\n        ).and.returnValue(true);\r\n\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validate_required_id_token'\r\n        ).and.returnValue(true);\r\n\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validate_id_token_iat_max_offset'\r\n        ).and.returnValue(true);\r\n\r\n        spyOnProperty(\r\n            authConfiguration,\r\n            'max_id_token_iat_offset_allowed_in_seconds',\r\n            'get'\r\n        ).and.returnValue(0);\r\n\r\n        spyOn(oidcSecurityValidation, 'validate_id_token_iss').and.returnValue(\r\n            true\r\n        );\r\n\r\n        spyOn(oidcSecurityValidation, 'validate_id_token_aud').and.returnValue(\r\n            true\r\n        );\r\n\r\n        spyOnProperty(authConfiguration, 'client_id', 'get').and.returnValue(\r\n            ''\r\n        );\r\n\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validate_id_token_exp_not_expired'\r\n        ).and.returnValue(false);\r\n\r\n        let logWarningSpy = spyOn(\r\n            oidcSecurityCommon,\r\n            'logWarning'\r\n        ).and.callFake(() => {});\r\n\r\n        const state = stateValidationService.validateState(\r\n            {\r\n                access_token: 'access_tokenTEST',\r\n                id_token: 'id_tokenTEST'\r\n            },\r\n            new JwtKeys()\r\n        );\r\n\r\n        expect(logWarningSpy).toHaveBeenCalledWith(\r\n            'authorizedCallback token expired'\r\n        );\r\n\r\n        expect(state.access_token).toBe('access_tokenTEST');\r\n        expect(state.id_token).toBe('id_tokenTEST');\r\n        expect(state.decoded_id_token).toBe('decoded_id_token');\r\n        expect(state.authResponseIsValid).toBe(false);\r\n    });\r\n\r\n    it('Reponse is valid if authConfiguration.response_type does not equal \"id_token token\"', () => {\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validateStateFromHashCallback'\r\n        ).and.returnValue(true);\r\n\r\n        spyOn(tokenHelperService, 'getPayloadFromToken').and.returnValue(\r\n            'decoded_id_token'\r\n        );\r\n\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validate_signature_id_token'\r\n        ).and.returnValue(true);\r\n\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validate_id_token_nonce'\r\n        ).and.returnValue(true);\r\n\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validate_required_id_token'\r\n        ).and.returnValue(true);\r\n\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validate_id_token_iat_max_offset'\r\n        ).and.returnValue(true);\r\n\r\n        spyOnProperty(\r\n            authConfiguration,\r\n            'max_id_token_iat_offset_allowed_in_seconds',\r\n            'get'\r\n        ).and.returnValue(0);\r\n\r\n        spyOn(oidcSecurityValidation, 'validate_id_token_iss').and.returnValue(\r\n            true\r\n        );\r\n\r\n        spyOn(oidcSecurityValidation, 'validate_id_token_aud').and.returnValue(\r\n            true\r\n        );\r\n\r\n        spyOnProperty(authConfiguration, 'client_id', 'get').and.returnValue(\r\n            ''\r\n        );\r\n\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validate_id_token_exp_not_expired'\r\n        ).and.returnValue(true);\r\n\r\n        spyOnProperty(\r\n            authConfiguration,\r\n            'response_type',\r\n            'get'\r\n        ).and.returnValue('NOT id_token token');\r\n\r\n        spyOnProperty(\r\n            authConfiguration,\r\n            'auto_clean_state_after_authentication',\r\n            'get'\r\n        ).and.returnValue('');\r\n\r\n        let logDebugSpy = spyOn(oidcSecurityCommon, 'logDebug').and.callFake(\r\n            () => {}\r\n        );\r\n\r\n        const state = stateValidationService.validateState(\r\n            {\r\n                access_token: 'access_tokenTEST',\r\n                id_token: 'id_tokenTEST'\r\n            },\r\n            new JwtKeys()\r\n        );\r\n\r\n        expect(logDebugSpy).toHaveBeenCalledWith(\r\n            'AuthorizedCallback token(s) validated, continue'\r\n        );\r\n\r\n        // CAN THIS BE DONE VIA IF/ELSE IN THE BEGINNING?\r\n        expect(state.access_token).toBe('');\r\n        expect(state.id_token).toBe('id_tokenTEST');\r\n        expect(state.decoded_id_token).toBe('decoded_id_token');\r\n        expect(state.authResponseIsValid).toBe(true);\r\n    });\r\n\r\n    it('Reponse is invalid if validate_id_token_at_hash is false', () => {\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validateStateFromHashCallback'\r\n        ).and.returnValue(true);\r\n\r\n        spyOn(tokenHelperService, 'getPayloadFromToken').and.returnValue(\r\n            'decoded_id_token'\r\n        );\r\n\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validate_signature_id_token'\r\n        ).and.returnValue(true);\r\n\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validate_id_token_nonce'\r\n        ).and.returnValue(true);\r\n\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validate_required_id_token'\r\n        ).and.returnValue(true);\r\n\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validate_id_token_iat_max_offset'\r\n        ).and.returnValue(true);\r\n\r\n        spyOnProperty(\r\n            authConfiguration,\r\n            'max_id_token_iat_offset_allowed_in_seconds',\r\n            'get'\r\n        ).and.returnValue(0);\r\n\r\n        spyOn(oidcSecurityValidation, 'validate_id_token_iss').and.returnValue(\r\n            true\r\n        );\r\n\r\n        spyOn(oidcSecurityValidation, 'validate_id_token_aud').and.returnValue(\r\n            true\r\n        );\r\n\r\n        spyOnProperty(authConfiguration, 'client_id', 'get').and.returnValue(\r\n            ''\r\n        );\r\n\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validate_id_token_exp_not_expired'\r\n        ).and.returnValue(true);\r\n\r\n        spyOnProperty(\r\n            authConfiguration,\r\n            'response_type',\r\n            'get'\r\n        ).and.returnValue('id_token token');\r\n\r\n        spyOnProperty(\r\n            authConfiguration,\r\n            'auto_clean_state_after_authentication',\r\n            'get'\r\n        ).and.returnValue('');\r\n\r\n        spyOn(\r\n            oidcSecurityValidation,\r\n            'validate_id_token_at_hash'\r\n        ).and.returnValue(false);\r\n\r\n        let logWarningSpy = spyOn(\r\n            oidcSecurityCommon,\r\n            'logWarning'\r\n        ).and.callFake(() => {});\r\n\r\n        const state = stateValidationService.validateState(\r\n            {\r\n                access_token: 'access_tokenTEST',\r\n                id_token: 'id_tokenTEST'\r\n            },\r\n            new JwtKeys()\r\n        );\r\n\r\n        expect(logWarningSpy).toHaveBeenCalledWith(\r\n            'authorizedCallback incorrect at_hash'\r\n        );\r\n\r\n        // CAN THIS BE DONE VIA IF/ELSE IN THE BEGINNING?\r\n        expect(state.access_token).toBe('access_tokenTEST');\r\n        expect(state.id_token).toBe('id_tokenTEST');\r\n        expect(state.decoded_id_token).toBe('decoded_id_token');\r\n        expect(state.authResponseIsValid).toBe(false);\r\n    });\r\n});\r\n"]}