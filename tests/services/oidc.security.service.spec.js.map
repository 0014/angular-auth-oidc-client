{"version":3,"file":"oidc.security.service.spec.js","sourceRoot":"","sources":["oidc.security.service.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpClientModule } from '@angular/common/http';\r\nimport { TestBed } from '@angular/core/testing';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { RouterTestingModule } from '@angular/router/testing';\r\n\r\nimport { OpenIDImplicitFlowConfiguration } from '../../src/modules/auth.configuration';\r\nimport { AuthModule } from '../../src/modules/auth.module';\r\nimport { OidcSecurityService } from '../../src/services/oidc.security.service';\r\nimport { OidcSecurityStorage } from '../../src/services/oidc.security.storage';\r\nimport { TestStorage } from '../common/test-storage.service';\r\n\r\ndescribe('OidcSecurityService', () => {\r\n    let oidcSecurityService: any;\r\n\r\n    beforeEach(() => {\r\n        TestBed.configureTestingModule({\r\n            imports: [\r\n                BrowserModule,\r\n                HttpClientModule,\r\n                RouterTestingModule,\r\n                AuthModule.forRoot()\r\n            ],\r\n            providers: [\r\n                OidcSecurityService,\r\n                {\r\n                    provide: OidcSecurityStorage,\r\n                    useClass: TestStorage\r\n                }\r\n            ]\r\n        });\r\n    });\r\n\r\n    beforeEach(() => {\r\n        oidcSecurityService = TestBed.get(OidcSecurityService);\r\n    });\r\n\r\n    it('should create', () => {\r\n        expect(oidcSecurityService).toBeTruthy();\r\n    });\r\n\r\n    it('createAuthorizeUrl default', () => {\r\n        // let well = '{\r\n        // \t\"issuer\":\"https://accounts.google.com\",\r\n        // \t\"authorization_endpoint\":\"https://accounts.google.com/o/oauth2/v2/auth\",\r\n        // \t\"token_endpoint\":\"https://www.googleapis.com/oauth2/v4/token\",\r\n        // \t\"userinfo_endpoint\":\"https://www.googleapis.com/oauth2/v3/userinfo\",\r\n        // \t\"revocation_endpoint\":\"https://accounts.google.com/o/oauth2/revoke\",\r\n        // \t\"jwks_uri\":\"https://www.googleapis.com/oauth2/v3/certs\",\r\n        // \t\"response_types_supported\":[ \"code\", \"token\", \"id_token\", \"codetoken\", \"codeid_token\", \"tokenid_token\", \"codetokenid_token\", \"none\" ],\r\n        // \t\"subject_types_supported\":[ \"public\" ],\r\n        // \t\"id_token_signing_alg_values_supported\":[ \"RS256\" ],\r\n        // \t\"scopes_supported\":[ \"openid\", \"email\", \"profile\" ],\r\n        // \t\"token_endpoint_auth_methods_supported\":[ \"client_secret_post\", \"client_secret_basic\" ],\r\n        // \t\"claims_supported\":[ \"aud\", \"email\", \"email_verified\", \"exp\", \"family_name\", \"given_name\", \"iat\", \"iss\",\"locale\",\"name\",\"picture\",\"sub\"],\r\n        // \t\"code_challenge_methods_supported\":[\"plain\",\"S256\"]}';\r\n        // (oidcSecurityService as any).oidcSecurityCommon.store('wellknownendpoints', well);\r\n\r\n        let openIDImplicitFlowConfiguration = new OpenIDImplicitFlowConfiguration();\r\n        openIDImplicitFlowConfiguration.stsServer = 'https://localhost:5001';\r\n        openIDImplicitFlowConfiguration.redirect_url =\r\n            'https://localhost:44386';\r\n        openIDImplicitFlowConfiguration.client_id =\r\n            '188968487735-b1hh7k87nkkh6vv84548sinju2kpr7gn.apps.googleusercontent.com';\r\n        openIDImplicitFlowConfiguration.response_type = 'id_token token';\r\n        openIDImplicitFlowConfiguration.scope = 'openid email profile';\r\n        openIDImplicitFlowConfiguration.post_logout_redirect_uri =\r\n            'https://localhost:44386/Unauthorized';\r\n        openIDImplicitFlowConfiguration.post_login_route = '/home';\r\n        openIDImplicitFlowConfiguration.forbidden_route = '/Forbidden';\r\n        openIDImplicitFlowConfiguration.unauthorized_route = '/Unauthorized';\r\n        openIDImplicitFlowConfiguration.start_checksession = false;\r\n        openIDImplicitFlowConfiguration.silent_renew = false;\r\n        openIDImplicitFlowConfiguration.silent_renew_offset_in_seconds = 0;\r\n        openIDImplicitFlowConfiguration.log_console_warning_active = true;\r\n        openIDImplicitFlowConfiguration.log_console_debug_active = true;\r\n        openIDImplicitFlowConfiguration.max_id_token_iat_offset_allowed_in_seconds = 10;\r\n        openIDImplicitFlowConfiguration.override_well_known_configuration = true;\r\n        openIDImplicitFlowConfiguration.override_well_known_configuration_url =\r\n            'https://localhost:44386/wellknownconfiguration.json';\r\n\r\n        oidcSecurityService.authConfiguration.init(\r\n            openIDImplicitFlowConfiguration\r\n        );\r\n\r\n        oidcSecurityService.setupModule(openIDImplicitFlowConfiguration);\r\n\r\n        let value = oidcSecurityService.createAuthorizeUrl(\r\n            'nonce',\r\n            'state',\r\n            'http://example'\r\n        );\r\n\r\n        let expectValue =\r\n            'http://example?client_id=188968487735-b1hh7k87nkkh6vv84548sinju2kpr7gn.apps.googleusercontent.com&redirect_uri=https%3A%2F%2Flocalhost%3A44386&response_type=id_token%20token&scope=openid%20email%20profile&nonce=nonce&state=state';\r\n\r\n        expect(value).toEqual(expectValue);\r\n    });\r\n\r\n    // https://docs.microsoft.com/en-us/azure/active-directory-b2c/active-directory-b2c-reference-oidc\r\n    it('createAuthorizeUrl with custom url like active-directory-b2c', () => {\r\n        let openIDImplicitFlowConfiguration = new OpenIDImplicitFlowConfiguration();\r\n\r\n        openIDImplicitFlowConfiguration.stsServer = 'https://localhost:5001';\r\n        openIDImplicitFlowConfiguration.redirect_url =\r\n            'https://localhost:44386';\r\n        openIDImplicitFlowConfiguration.client_id = 'myid';\r\n        openIDImplicitFlowConfiguration.response_type = 'id_token token';\r\n        openIDImplicitFlowConfiguration.scope = 'openid email profile';\r\n        openIDImplicitFlowConfiguration.post_logout_redirect_uri =\r\n            'https://localhost:44386/Unauthorized';\r\n        openIDImplicitFlowConfiguration.post_login_route = '/home';\r\n        openIDImplicitFlowConfiguration.forbidden_route = '/Forbidden';\r\n        openIDImplicitFlowConfiguration.unauthorized_route = '/Unauthorized';\r\n        openIDImplicitFlowConfiguration.start_checksession = false;\r\n        openIDImplicitFlowConfiguration.silent_renew = false;\r\n        openIDImplicitFlowConfiguration.silent_renew_offset_in_seconds = 0;\r\n        openIDImplicitFlowConfiguration.log_console_warning_active = true;\r\n        openIDImplicitFlowConfiguration.log_console_debug_active = true;\r\n        openIDImplicitFlowConfiguration.max_id_token_iat_offset_allowed_in_seconds = 10;\r\n        openIDImplicitFlowConfiguration.override_well_known_configuration = true;\r\n        openIDImplicitFlowConfiguration.override_well_known_configuration_url =\r\n            'https://localhost:44386/wellknownconfiguration.json';\r\n\r\n        oidcSecurityService.authConfiguration.init(\r\n            openIDImplicitFlowConfiguration\r\n        );\r\n\r\n        let value = oidcSecurityService.createAuthorizeUrl(\r\n            'nonce',\r\n            'state',\r\n            'https://login.microsoftonline.com/fabrikamb2c.onmicrosoft.com/oauth2/v2.0/authorize?p=b2c_1_sign_in'\r\n        );\r\n\r\n        let expectValue =\r\n            'https://login.microsoftonline.com/fabrikamb2c.onmicrosoft.com/oauth2/v2.0/authorize?p=b2c_1_sign_in&client_id=myid&redirect_uri=https%3A%2F%2Flocalhost%3A44386&response_type=id_token%20token&scope=openid%20email%20profile&nonce=nonce&state=state';\r\n\r\n        expect(value).toEqual(expectValue);\r\n    });\r\n\r\n    it('createEndSessionUrl with azure-ad-b2c policy parameter', () => {\r\n        let openIDImplicitFlowConfiguration = new OpenIDImplicitFlowConfiguration();\r\n        openIDImplicitFlowConfiguration.stsServer = 'https://localhost:5001';\r\n        openIDImplicitFlowConfiguration.redirect_url =\r\n            'https://localhost:44386';\r\n        openIDImplicitFlowConfiguration.client_id = 'myid';\r\n        openIDImplicitFlowConfiguration.response_type = 'id_token token';\r\n        openIDImplicitFlowConfiguration.scope = 'openid email profile';\r\n        openIDImplicitFlowConfiguration.post_logout_redirect_uri =\r\n            'https://localhost:44386/Unauthorized';\r\n        openIDImplicitFlowConfiguration.post_login_route = '/home';\r\n        openIDImplicitFlowConfiguration.forbidden_route = '/Forbidden';\r\n        openIDImplicitFlowConfiguration.unauthorized_route = '/Unauthorized';\r\n        openIDImplicitFlowConfiguration.start_checksession = false;\r\n        openIDImplicitFlowConfiguration.silent_renew = false;\r\n        openIDImplicitFlowConfiguration.silent_renew_offset_in_seconds = 0;\r\n        openIDImplicitFlowConfiguration.log_console_warning_active = true;\r\n        openIDImplicitFlowConfiguration.log_console_debug_active = true;\r\n        openIDImplicitFlowConfiguration.max_id_token_iat_offset_allowed_in_seconds = 10;\r\n        openIDImplicitFlowConfiguration.override_well_known_configuration = true;\r\n        openIDImplicitFlowConfiguration.override_well_known_configuration_url =\r\n            'https://localhost:44386/wellknownconfiguration.json';\r\n\r\n        oidcSecurityService.authConfiguration.init(\r\n            openIDImplicitFlowConfiguration\r\n        );\r\n\r\n        let value = oidcSecurityService.createEndSessionUrl(\r\n            'https://login.microsoftonline.com/fabrikamb2c.onmicrosoft.com/oauth2/v2.0/logout?p=b2c_1_sign_in',\r\n            'UzI1NiIsImtpZCI6Il'\r\n        );\r\n\r\n        let expectValue =\r\n            'https://login.microsoftonline.com/fabrikamb2c.onmicrosoft.com/oauth2/v2.0/logout?p=b2c_1_sign_in&id_token_hint=UzI1NiIsImtpZCI6Il&post_logout_redirect_uri=https%3A%2F%2Flocalhost%3A44386%2FUnauthorized';\r\n\r\n        expect(value).toEqual(expectValue);\r\n    });\r\n\r\n    it('createAuthorizeUrl with custom value', () => {\r\n        let openIDImplicitFlowConfiguration = new OpenIDImplicitFlowConfiguration();\r\n        openIDImplicitFlowConfiguration.stsServer = 'https://localhost:5001';\r\n        openIDImplicitFlowConfiguration.redirect_url =\r\n            'https://localhost:44386';\r\n        openIDImplicitFlowConfiguration.client_id =\r\n            '188968487735-b1hh7k87nkkh6vv84548sinju2kpr7gn.apps.googleusercontent.com';\r\n        openIDImplicitFlowConfiguration.response_type = 'id_token token';\r\n        openIDImplicitFlowConfiguration.scope = 'openid email profile';\r\n        openIDImplicitFlowConfiguration.post_logout_redirect_uri =\r\n            'https://localhost:44386/Unauthorized';\r\n        openIDImplicitFlowConfiguration.post_login_route = '/home';\r\n        openIDImplicitFlowConfiguration.forbidden_route = '/Forbidden';\r\n        openIDImplicitFlowConfiguration.unauthorized_route = '/Unauthorized';\r\n        openIDImplicitFlowConfiguration.start_checksession = false;\r\n        openIDImplicitFlowConfiguration.silent_renew = false;\r\n        openIDImplicitFlowConfiguration.silent_renew_offset_in_seconds = 0;\r\n        openIDImplicitFlowConfiguration.log_console_warning_active = true;\r\n        openIDImplicitFlowConfiguration.log_console_debug_active = true;\r\n        openIDImplicitFlowConfiguration.max_id_token_iat_offset_allowed_in_seconds = 10;\r\n        openIDImplicitFlowConfiguration.override_well_known_configuration = true;\r\n        openIDImplicitFlowConfiguration.override_well_known_configuration_url =\r\n            'https://localhost:44386/wellknownconfiguration.json';\r\n\r\n        oidcSecurityService.authConfiguration.init(\r\n            openIDImplicitFlowConfiguration\r\n        );\r\n\r\n        oidcSecurityService.setCustomRequestParameters({\r\n            testcustom: 'customvalue'\r\n        });\r\n\r\n        let value = oidcSecurityService.createAuthorizeUrl(\r\n            'nonce',\r\n            'state',\r\n            'http://example'\r\n        );\r\n        let expectValue =\r\n            'http://example?client_id=188968487735-b1hh7k87nkkh6vv84548sinju2kpr7gn.apps.googleusercontent.com&redirect_uri=https%3A%2F%2Flocalhost%3A44386&response_type=id_token%20token&scope=openid%20email%20profile&nonce=nonce&state=state&testcustom=customvalue';\r\n\r\n        expect(value).toEqual(expectValue);\r\n    });\r\n\r\n    it('createAuthorizeUrl with custom values', () => {\r\n        let openIDImplicitFlowConfiguration = new OpenIDImplicitFlowConfiguration();\r\n        openIDImplicitFlowConfiguration.stsServer = 'https://localhost:5001';\r\n        openIDImplicitFlowConfiguration.redirect_url =\r\n            'https://localhost:44386';\r\n        openIDImplicitFlowConfiguration.client_id =\r\n            '188968487735-b1hh7k87nkkh6vv84548sinju2kpr7gn.apps.googleusercontent.com';\r\n        openIDImplicitFlowConfiguration.response_type = 'id_token token';\r\n        openIDImplicitFlowConfiguration.scope = 'openid email profile';\r\n        openIDImplicitFlowConfiguration.post_logout_redirect_uri =\r\n            'https://localhost:44386/Unauthorized';\r\n        openIDImplicitFlowConfiguration.post_login_route = '/home';\r\n        openIDImplicitFlowConfiguration.forbidden_route = '/Forbidden';\r\n        openIDImplicitFlowConfiguration.unauthorized_route = '/Unauthorized';\r\n        openIDImplicitFlowConfiguration.start_checksession = false;\r\n        openIDImplicitFlowConfiguration.silent_renew = false;\r\n        openIDImplicitFlowConfiguration.silent_renew_offset_in_seconds = 0;\r\n        openIDImplicitFlowConfiguration.log_console_warning_active = true;\r\n        openIDImplicitFlowConfiguration.log_console_debug_active = true;\r\n        openIDImplicitFlowConfiguration.max_id_token_iat_offset_allowed_in_seconds = 10;\r\n        openIDImplicitFlowConfiguration.override_well_known_configuration = true;\r\n        openIDImplicitFlowConfiguration.override_well_known_configuration_url =\r\n            'https://localhost:44386/wellknownconfiguration.json';\r\n\r\n        oidcSecurityService.authConfiguration.init(\r\n            openIDImplicitFlowConfiguration\r\n        );\r\n\r\n        oidcSecurityService.setCustomRequestParameters({\r\n            t4: 'ABC abc 123',\r\n            t3: '#',\r\n            t2: '-_.!~*()',\r\n            t1: ';,/?:@&=+$'\r\n        });\r\n\r\n        let value = oidcSecurityService.createAuthorizeUrl(\r\n            'nonce',\r\n            'state',\r\n            'http://example'\r\n        );\r\n        let expectValue =\r\n            'http://example?client_id=188968487735-b1hh7k87nkkh6vv84548sinju2kpr7gn.apps.googleusercontent.com&redirect_uri=https%3A%2F%2Flocalhost%3A44386&response_type=id_token%20token&scope=openid%20email%20profile&nonce=nonce&state=state&t4=ABC%20abc%20123&t3=%23&t2=-_.!~*()&t1=%3B%2C%2F%3F%3A%40%26%3D%2B%24';\r\n\r\n        expect(value).toEqual(expectValue);\r\n    });\r\n\r\n    it('createEndSessionUrl default', () => {\r\n        let openIDImplicitFlowConfiguration = new OpenIDImplicitFlowConfiguration();\r\n        openIDImplicitFlowConfiguration.stsServer = 'https://localhost:5001';\r\n        openIDImplicitFlowConfiguration.redirect_url =\r\n            'https://localhost:44386';\r\n        openIDImplicitFlowConfiguration.client_id =\r\n            '188968487735-b1hh7k87nkkh6vv84548sinju2kpr7gn.apps.googleusercontent.com';\r\n        openIDImplicitFlowConfiguration.response_type = 'id_token token';\r\n        openIDImplicitFlowConfiguration.scope = 'openid email profile';\r\n        openIDImplicitFlowConfiguration.post_logout_redirect_uri =\r\n            'https://localhost:44386/Unauthorized';\r\n        openIDImplicitFlowConfiguration.post_login_route = '/home';\r\n        openIDImplicitFlowConfiguration.forbidden_route = '/Forbidden';\r\n        openIDImplicitFlowConfiguration.unauthorized_route = '/Unauthorized';\r\n        openIDImplicitFlowConfiguration.start_checksession = false;\r\n        openIDImplicitFlowConfiguration.silent_renew = false;\r\n        openIDImplicitFlowConfiguration.silent_renew_offset_in_seconds = 0;\r\n        openIDImplicitFlowConfiguration.log_console_warning_active = true;\r\n        openIDImplicitFlowConfiguration.log_console_debug_active = true;\r\n        openIDImplicitFlowConfiguration.max_id_token_iat_offset_allowed_in_seconds = 10;\r\n        openIDImplicitFlowConfiguration.override_well_known_configuration = true;\r\n        openIDImplicitFlowConfiguration.override_well_known_configuration_url =\r\n            'https://localhost:44386/wellknownconfiguration.json';\r\n\r\n        oidcSecurityService.authConfiguration.init(\r\n            openIDImplicitFlowConfiguration\r\n        );\r\n\r\n        let value = oidcSecurityService.createEndSessionUrl(\r\n            'http://example',\r\n            'mytoken'\r\n        );\r\n\r\n        let expectValue =\r\n            'http://example?id_token_hint=mytoken&post_logout_redirect_uri=https%3A%2F%2Flocalhost%3A44386%2FUnauthorized';\r\n\r\n        expect(value).toEqual(expectValue);\r\n    });\r\n});\r\n"]}