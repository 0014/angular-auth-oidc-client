{"version":3,"file":"auth-well-known-endpoints.spec.js","sourceRoot":"","sources":["auth-well-known-endpoints.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { OidcDataService } from '../../src/services/oidc-data.service';\r\nimport {\r\n    HttpClientTestingModule,\r\n    HttpTestingController\r\n} from '@angular/common/http/testing';\r\nimport { TestBed } from '@angular/core/testing';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { RouterTestingModule } from '@angular/router/testing';\r\nimport { of } from 'rxjs/observable/of';\r\n\r\nimport { TestStorage } from '../common/test-storage.service';\r\nimport {\r\n    AuthModule,\r\n    AuthWellKnownEndpoints,\r\n    OidcSecurityCommon,\r\n    OidcSecurityStorage,\r\n    AuthConfiguration\r\n} from './../../index';\r\n\r\ndescribe('AuthWellKnownEndpoints', () => {\r\n    let authWellKnownEndpoints: any;\r\n    let oidcSecurityCommon: OidcSecurityCommon;\r\n    let httpMock: HttpTestingController;\r\n    let authConfiguration: AuthConfiguration;\r\n\r\n    beforeEach(() => {\r\n        TestBed.configureTestingModule({\r\n            imports: [\r\n                BrowserModule,\r\n                HttpClientTestingModule,\r\n                RouterTestingModule,\r\n                AuthModule.forRoot()\r\n            ],\r\n            providers: [\r\n                AuthWellKnownEndpoints,\r\n                AuthConfiguration,\r\n                OidcSecurityCommon,\r\n                OidcDataService,\r\n                {\r\n                    provide: OidcSecurityStorage,\r\n                    useClass: TestStorage\r\n                }\r\n            ]\r\n        });\r\n    });\r\n\r\n    beforeEach(() => {\r\n        authWellKnownEndpoints = TestBed.get(AuthWellKnownEndpoints);\r\n        oidcSecurityCommon = TestBed.get(OidcSecurityCommon);\r\n        httpMock = TestBed.get(HttpTestingController);\r\n        authConfiguration = TestBed.get(AuthConfiguration);\r\n    });\r\n\r\n    it('can create', () => {\r\n        expect(authWellKnownEndpoints).toBeDefined();\r\n        expect(oidcSecurityCommon).toBeDefined();\r\n        expect(httpMock).toBeDefined();\r\n        expect(authConfiguration).toBeDefined();\r\n    });\r\n\r\n    it('if wellKnownEndpoints are set logdebug is called two times', () => {\r\n        spyOnProperty(\r\n            oidcSecurityCommon,\r\n            'wellKnownEndpoints',\r\n            'get'\r\n        ).and.returnValue({ issuer: 'anyValue' });\r\n\r\n        const logDebugSpy = spyOn(oidcSecurityCommon, 'logDebug').and.callFake(\r\n            () => {}\r\n        );\r\n\r\n        authWellKnownEndpoints.setupModule();\r\n\r\n        expect(logDebugSpy).toHaveBeenCalledTimes(2);\r\n        expect(logDebugSpy).toHaveBeenCalledWith({ issuer: 'anyValue' });\r\n        expect(logDebugSpy).toHaveBeenCalledWith(\r\n            'AuthWellKnownEndpoints already defined'\r\n        );\r\n    });\r\n\r\n    it('if wellKnownEndpoints are set emit was firing once', () => {\r\n        spyOnProperty(\r\n            oidcSecurityCommon,\r\n            'wellKnownEndpoints',\r\n            'get'\r\n        ).and.returnValue({ issuer: 'anyValue' });\r\n\r\n        spyOn(oidcSecurityCommon, 'logDebug').and.callFake(() => {});\r\n\r\n        spyOn(authWellKnownEndpoints.onWellKnownEndpointsLoaded, 'emit');\r\n\r\n        authWellKnownEndpoints.setupModule();\r\n\r\n        expect(\r\n            authWellKnownEndpoints.onWellKnownEndpointsLoaded.emit\r\n        ).toHaveBeenCalled();\r\n    });\r\n\r\n    it('if wellKnownEndpoints are set authWellKnownEndpoints applied all values correctly', () => {\r\n        spyOnProperty(\r\n            oidcSecurityCommon,\r\n            'wellKnownEndpoints',\r\n            'get'\r\n        ).and.returnValue({\r\n            issuer: 'anyValue',\r\n            authorization_endpoint: 'authorization_endpoint',\r\n            jwks_uri: 'jwks_uri',\r\n            token_endpoint: 'token_endpoint',\r\n            userinfo_endpoint: 'userinfo_endpoint',\r\n            end_session_endpoint: 'end_session_endpoint',\r\n            check_session_iframe: 'check_session_iframe',\r\n            revocation_endpoint: 'revocation_endpoint',\r\n            introspection_endpoint: 'introspection_endpoint'\r\n        });\r\n\r\n        spyOn(oidcSecurityCommon, 'logDebug').and.callFake(() => {});\r\n\r\n        authWellKnownEndpoints.setupModule();\r\n\r\n        expect(authWellKnownEndpoints.issuer).toBe('anyValue');\r\n        expect(authWellKnownEndpoints.authorization_endpoint).toBe(\r\n            'authorization_endpoint'\r\n        );\r\n\r\n        expect(authWellKnownEndpoints.jwks_uri).toBe('jwks_uri');\r\n        expect(authWellKnownEndpoints.token_endpoint).toBe('token_endpoint');\r\n        expect(authWellKnownEndpoints.userinfo_endpoint).toBe(\r\n            'userinfo_endpoint'\r\n        );\r\n        expect(authWellKnownEndpoints.end_session_endpoint).toBe(\r\n            'end_session_endpoint'\r\n        );\r\n        expect(authWellKnownEndpoints.check_session_iframe).toBe(\r\n            'check_session_iframe'\r\n        );\r\n        expect(authWellKnownEndpoints.revocation_endpoint).toBe(\r\n            'revocation_endpoint'\r\n        );\r\n        expect(authWellKnownEndpoints.introspection_endpoint).toBe(\r\n            'introspection_endpoint'\r\n        );\r\n    });\r\n\r\n    it('if wellKnownEndpoints are not set logdebug is called once and values are set correctly', () => {\r\n        const testValues = {\r\n            issuer: 'anyValue',\r\n            authorization_endpoint: 'authorization_endpoint',\r\n            jwks_uri: 'jwks_uri',\r\n            token_endpoint: 'token_endpoint',\r\n            userinfo_endpoint: 'userinfo_endpoint',\r\n            end_session_endpoint: 'end_session_endpoint',\r\n            check_session_iframe: 'check_session_iframe',\r\n            revocation_endpoint: 'revocation_endpoint',\r\n            introspection_endpoint: 'introspection_endpoint'\r\n        };\r\n\r\n        spyOnProperty(\r\n            oidcSecurityCommon,\r\n            'wellKnownEndpoints',\r\n            'get'\r\n        ).and.returnValue('');\r\n\r\n        const logDebugSpy = spyOn(oidcSecurityCommon, 'logDebug').and.callFake(\r\n            () => {}\r\n        );\r\n\r\n        spyOn(authWellKnownEndpoints, 'getWellKnownEndpoints').and.callFake(\r\n            () => {\r\n                return of(testValues);\r\n            }\r\n        );\r\n\r\n        authWellKnownEndpoints.setupModule();\r\n\r\n        expect(logDebugSpy).toHaveBeenCalledWith(\r\n            'AuthWellKnownEndpoints first time, get from the server'\r\n        );\r\n\r\n        expect(authWellKnownEndpoints.issuer).toBe('anyValue');\r\n        expect(authWellKnownEndpoints.authorization_endpoint).toBe(\r\n            'authorization_endpoint'\r\n        );\r\n\r\n        expect(authWellKnownEndpoints.jwks_uri).toBe('jwks_uri');\r\n        expect(authWellKnownEndpoints.token_endpoint).toBe('token_endpoint');\r\n        expect(authWellKnownEndpoints.userinfo_endpoint).toBe(\r\n            'userinfo_endpoint'\r\n        );\r\n        expect(authWellKnownEndpoints.end_session_endpoint).toBe(\r\n            'end_session_endpoint'\r\n        );\r\n        expect(authWellKnownEndpoints.check_session_iframe).toBe(\r\n            'check_session_iframe'\r\n        );\r\n        expect(authWellKnownEndpoints.revocation_endpoint).toBe(\r\n            'revocation_endpoint'\r\n        );\r\n        expect(authWellKnownEndpoints.introspection_endpoint).toBe(\r\n            'introspection_endpoint'\r\n        );\r\n    });\r\n\r\n    it('if wellKnownEndpoints are not set oidcSecurityCommon.wellKnownEndpoints equal the returned data', () => {\r\n        const testValues = {\r\n            issuer: 'anyValue',\r\n            authorization_endpoint: 'authorization_endpoint',\r\n            jwks_uri: 'jwks_uri',\r\n            token_endpoint: 'token_endpoint',\r\n            userinfo_endpoint: 'userinfo_endpoint',\r\n            end_session_endpoint: 'end_session_endpoint',\r\n            check_session_iframe: 'check_session_iframe',\r\n            revocation_endpoint: 'revocation_endpoint',\r\n            introspection_endpoint: 'introspection_endpoint'\r\n        };\r\n\r\n        spyOn(oidcSecurityCommon, 'logDebug').and.callFake(() => {});\r\n\r\n        spyOn(authWellKnownEndpoints, 'getWellKnownEndpoints').and.callFake(\r\n            () => {\r\n                return of(testValues);\r\n            }\r\n        );\r\n\r\n        authWellKnownEndpoints.setupModule();\r\n\r\n        expect(oidcSecurityCommon.wellKnownEndpoints).toBe(testValues);\r\n    });\r\n\r\n    it('if wellKnownEndpoints are not set logdebug is called with the data', () => {\r\n        const testValues = {\r\n            issuer: 'anyValue',\r\n            authorization_endpoint: 'authorization_endpoint',\r\n            jwks_uri: 'jwks_uri',\r\n            token_endpoint: 'token_endpoint',\r\n            userinfo_endpoint: 'userinfo_endpoint',\r\n            end_session_endpoint: 'end_session_endpoint',\r\n            check_session_iframe: 'check_session_iframe',\r\n            revocation_endpoint: 'revocation_endpoint',\r\n            introspection_endpoint: 'introspection_endpoint'\r\n        };\r\n\r\n        const logDebugSpy = spyOn(oidcSecurityCommon, 'logDebug').and.callFake(\r\n            () => {}\r\n        );\r\n\r\n        spyOn(authWellKnownEndpoints, 'getWellKnownEndpoints').and.callFake(\r\n            () => {\r\n                return of(testValues);\r\n            }\r\n        );\r\n\r\n        authWellKnownEndpoints.setupModule();\r\n\r\n        expect(logDebugSpy).toHaveBeenCalledWith(testValues);\r\n    });\r\n\r\n    it('if wellKnownEndpoints are not set onWellKnownEndpointsLoaded.emit() is called', () => {\r\n        const testValues = {\r\n            issuer: 'anyValue',\r\n            authorization_endpoint: 'authorization_endpoint',\r\n            jwks_uri: 'jwks_uri',\r\n            token_endpoint: 'token_endpoint',\r\n            userinfo_endpoint: 'userinfo_endpoint',\r\n            end_session_endpoint: 'end_session_endpoint',\r\n            check_session_iframe: 'check_session_iframe',\r\n            revocation_endpoint: 'revocation_endpoint',\r\n            introspection_endpoint: 'introspection_endpoint'\r\n        };\r\n\r\n        spyOn(oidcSecurityCommon, 'logDebug').and.callFake(() => {});\r\n\r\n        spyOn(authWellKnownEndpoints, 'getWellKnownEndpoints').and.callFake(\r\n            () => {\r\n                return of(testValues);\r\n            }\r\n        );\r\n\r\n        spyOn(authWellKnownEndpoints.onWellKnownEndpointsLoaded, 'emit');\r\n\r\n        authWellKnownEndpoints.setupModule();\r\n\r\n        expect(\r\n            authWellKnownEndpoints.onWellKnownEndpointsLoaded.emit\r\n        ).toHaveBeenCalled();\r\n    });\r\n\r\n    it('if override_well_known_configuration is not set url stays same', () => {\r\n        spyOnProperty(authConfiguration, 'stsServer', 'get').and.returnValue(\r\n            'hallelujah'\r\n        );\r\n\r\n        spyOnProperty(\r\n            authConfiguration,\r\n            'override_well_known_configuration',\r\n            'get'\r\n        ).and.returnValue(false);\r\n\r\n        authWellKnownEndpoints\r\n            .getWellKnownEndpoints()\r\n            .subscribe((data: any) => {\r\n                expect(data.name).toBe('Luke Skywalker');\r\n            });\r\n\r\n        const req = httpMock.expectOne(\r\n            `hallelujah/.well-known/openid-configuration`,\r\n            'call to api'\r\n        );\r\n\r\n        expect(req.request.method).toBe('GET');\r\n        expect(req.request.headers.get('Accept')).toBe('application/json');\r\n        expect(req.request.url).toBe(\r\n            `hallelujah/.well-known/openid-configuration`\r\n        );\r\n\r\n        req.flush({\r\n            name: 'Luke Skywalker'\r\n        });\r\n\r\n        httpMock.verify();\r\n    });\r\n\r\n    it('if override_well_known_configuration is set to true the url changes', () => {\r\n        spyOnProperty(authConfiguration, 'stsServer', 'get').and.returnValue(\r\n            'hallelujah'\r\n        );\r\n\r\n        spyOnProperty(\r\n            authConfiguration,\r\n            'override_well_known_configuration',\r\n            'get'\r\n        ).and.returnValue(true);\r\n\r\n        spyOnProperty(\r\n            authConfiguration,\r\n            'override_well_known_configuration_url',\r\n            'get'\r\n        ).and.returnValue('OVERRIDE THE WHOLE URL!!!!');\r\n\r\n        authWellKnownEndpoints\r\n            .getWellKnownEndpoints()\r\n            .subscribe((data: any) => {\r\n                expect(data.name).toBe('Luke Skywalker');\r\n            });\r\n\r\n        const req = httpMock.expectOne(\r\n            `OVERRIDE THE WHOLE URL!!!!`,\r\n            'call to api'\r\n        );\r\n\r\n        expect(req.request.method).toBe('GET');\r\n        expect(req.request.headers.get('Accept')).toBe('application/json');\r\n        expect(req.request.url).toBe(`OVERRIDE THE WHOLE URL!!!!`);\r\n\r\n        req.flush({\r\n            name: 'Luke Skywalker'\r\n        });\r\n\r\n        httpMock.verify();\r\n    });\r\n});\r\n"]}